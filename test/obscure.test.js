const test = require("node:test");
const assert = require("node:assert");
const { ObscureReference } = require("../obscure");

test("ObscureReference - returns correct value", () => {
  const testString = "There is no spoon.";
  const obscure = ObscureReference(testString);
  assert.equal(`${obscure}`, testString);
});
test("ObscureReference - returns correct value - long", () => {
  const testString = longText;
  const obscure = ObscureReference(testString);
  assert.equal(`${obscure}`, testString);
});

test("ObscureReference - supports wide characters", () => {
  const testString = "There is no spoon. üèãÔ∏è‚Äç‚ôÄÔ∏èüï∂Ô∏è";
  const obscure = ObscureReference(testString);
  assert.equal(`${obscure}`, testString);
});

test("ObscureReference - JSON serialization", () => {
  const testString = "There is no spoon. üèãÔ∏è‚Äç‚ôÄÔ∏èüï∂Ô∏è";
  const obscure = ObscureReference(testString);
  const payload = JSON.stringify(obscure);
  const obscure2 = ObscureReference.fromJSON(payload);
  assert.equal(`${obscure}`, testString);
  assert.equal(`${obscure2}`, testString);
});

test("ObscureReference - JSON serialization - long", () => {
  const testString = longText;
  const obscure = ObscureReference(testString);
  const payload = JSON.stringify(obscure);
  const obscure2 = ObscureReference.fromJSON(payload);
  assert.equal(`${obscure}`, testString);
  assert.equal(`${obscure2}`, testString);
});

// hurray for hoisting

var longText = `
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£Ä‚°§‚¢Ñ‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚°§‚†∂‚†¶‚°û‚¢≥‚£∂‚°Ñ‚†ô‚°Ñ‚£Ä‚£Ä‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚°è‚†Ä‚£†‚£§‚£π‚°ú‚†õ‚†Å‚£†‚†ó‚†õ‚†â‚†ô‚¢≥‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†≥‚£Ñ‚£ò‚£ü‚†ø‚†ã‚†â‚†â‚†Ä‚†Ä‚†Ä‚†Ä‚¢à‚£ø‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£†‚†æ‚†õ‚†â‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£Ä‚£†‚£§‚£¥‚†õ‚£ü‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£∞‚°á‚£∞‚†Ä‚†Ä‚†Ä‚¢Ä‚£†‚£¥‚£æ‚£ø‚£ø‚£ø‚£ø‚£ø‚°Ñ‚†∏‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢ø‚°Ä‚†õ‚†ª‚£∂‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°á‚†Ä‚£á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†ò‚£∑‚°Ñ‚†Ä‚†à‚†ª‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°ø‚†Å‚¢Ä‚°ü‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†ò‚£ø‚£Ñ‚†Ä‚†Ä‚†à‚†ô‚†ª‚†ø‚†ø‚†ø‚†ü‚†ã‚†Ä‚¢Ä‚°æ‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£ø‚†â‚†ª‚¢¶‚£Ñ‚£Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚£∞‚¢ø‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£ø‚†Ä‚†Ä‚†Ä‚†à‚†â‚†â‚†ô‚†ö‚†í‚†Ä‚†à‚¢Ä‚†à‚£á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢∞‚†á‚£∞‚†É‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢∏‚°Ü‚¢π‚°Ñ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢†‚°ø‚¢†‚°è‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†á‚†à‚¢ß‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£∞‚†É‚£∏‚†É‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚¢∑‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢º‚°∑‚†Ä‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†≥‚£Ñ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢†‚°û‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚£Ä‚£à‚°ì‚¢§‚£Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£†‚°∂‚¢ã‚°Ñ‚†Ä‚†Ä‚¢Ä‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚°¥‚†ö‚£ø‚†ç‚¢Ä‚£Ä‚†â‚†ì‚£Æ‚£ü‚£¶‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£†‚†û‚¢°‚°§‚°æ‚¢ª‚°æ‚¢ø‚°è‚†õ‚£¶‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£∏‚†Ñ‚¢∞‚†É‚†Ä‚°û‚†Å‚£∞‚°Ä‚¢ª‚£Ω‚£Ñ‚£ô‚£¶‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£†‚£æ‚°∑‚¢∂‚£ø‚¢Ä‚£á‚£∏‚£á‚£∏‚£ø‚£∞‚£º‚£§‚£¥‚†∂‚†∂‚£§‚£Ñ‚£æ‚†ø‚†∂‚£ø‚£¶‚£æ‚¢¥‚£æ‚£ø‚†§‚†ø‚£ß‚°ø‚†õ‚†õ‚°õ‚¢ª‚£ß‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚£æ‚†è‚¢Ä‚£Ä‚£Ä‚£π‚£ø‚°ø‚†â‚£π‚£Ø‚£Ä‚†ô‚£ø‚°è‚¢†‚£§‚£Ñ‚†à‚¢ª‚£ø‚†Ä‚†Ä‚¢ª‚°ü‚†Å‚£∏‚†ü‚£ø‚†Ä‚†Ä‚£ø‚£ø‚†Ä‚†∏‚†ü‚¢ª‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚¢∏‚£ü‚†Ä‚£∏‚°è‚†ô‚£õ‚£π‚°á‚†Ä‚£ø‚°ô‚£ø‚†Ä‚£ø‚°á‚¢∏‚£è‚£π‚°á‚¢†‚£ø‚†Ä‚†Ä‚£Ä‚†Ä‚†∞‚£ø‚†Ä‚¢π‚°Ä‚†Ä‚£ø‚¢ø‚°á‚†Ä‚£¥‚£æ‚£∑‚°Ü‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†∏‚£ø‚°Ä‚†π‚£∑‚°æ‚†õ‚¢ª‚£∑‚°Ä‚†ô‚†ø‚†ã‚¢†‚£ø‚£ß‚†Ä‚†õ‚†ã‚¢Ä‚£æ‚¢ø‚°Ü‚†Ä‚£ø‚£ß‚°Ä‚¢π‚£ß‚¢∏‚°á‚¢Ä‚°è‚¢∏‚£á‚†Ä‚†Ä‚†Ä‚¢∏‚£ß‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚¢†‚£§‚£†‚£π‚¢ø‚£¶‚£§‚£§‚£¥‚£ø‚£©‚£ø‚†ø‚¢æ‚£∂‚£ø‚£ß‚£Ω‚£ø‚£∂‚£∂‚£ø‚£ß‚£º‚£ø‚°∂‚¢ø‚£ø‚£ø‚†æ‚¢ø‚£ø‚†ø‚£ø‚£ø‚†æ‚†ø‚†∑‚¢ø‚°ü‚†õ‚†õ‚†õ‚¢ø‚£¶‚†Ä
‚†Ä‚¢∏‚†á‚†Ä‚†ª‚£∑‚°è‚†Å‚†Ä‚£ø‚£ø‚†Å‚¢Ä‚£§‚°Ä‚†à‚¢ª‚°á‚†Ä‚†Ä‚£ø‚£ø‚†Ä‚¢ø‚°á‚†Ä‚¢Ä‚£§‚£ø‚°Ñ‚†Ä‚†Ä‚†Ä‚†Ä‚¢à‚£ø‚†Ä‚¢∏‚£∂‚£æ‚°á‚†à‚£ø‚†¶‚£Ä‚£ø‚†Ü
‚†Ä‚£æ‚†Ä‚¢†‚°Ä‚†â‚†Ä‚£Ä‚†Ä‚¢ª‚°á‚†Ä‚£ø‚°è‚£ø‚†Ä‚†à‚£ø‚†Ä‚†Ä‚†ò‚†õ‚†Ä‚¢∏‚£∑‚£Ñ‚†ò‚¢ø‚£ø‚£ü‚£ø‚†Ä‚†Ä‚£ø‚†õ‚£ø‚†Ä‚¢†‚£§‚£ø‚°á‚†Ä‚†Ä‚†Ä‚¢ø‚°è‚†Ä
‚†Ä‚°è‚†Ä‚£º‚¢ø‚£¶‚°æ‚£ø‚†Ä‚¢∏‚£á‚†Ä‚†ô‚†ó‚†ã‚†Ä‚£∞‚°ü‚¢Ä‚£ø‚°Ñ‚†Ä‚†Ä‚¢∏‚°ø‚†ø‚†Ç‚†Ä‚†à‚£ø‚¢ø‚°Ä‚¢Ä‚°è‚†Ä‚¢∏‚°Ñ‚†ò‚†ã‚¢ª‚°á‚†Ä‚£ø‚£Ü‚†ò‚£ø‚°Ñ
‚¢†‚£ø‚£§‚£ø‚†Ä‚†â‚†Ä‚£ø‚£§‚£º‚°ü‚¢∑‚£§‚£§‚£§‚£∂‚¢ø‚£ß‚£º‚°ü‚†ø‚†∂‚†∂‚¢æ‚£ß‚£§‚£§‚£§‚°æ‚†è‚¢∏‚£ß‚£º‚°á‚†Ä‚†∏‚†ø‚†∂‚†∂‚†ø‚£∑‚£∂‚°ø‚¢ª‚£∂‚°ø‚†ó
‚†Ä‚†à‚†Ä‚†à‚†Ä‚†Ä‚†Ä‚†à‚†â‚†â‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚†â‚†Ä‚†Ä‚†Ä‚†Ä‚†â‚†â‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
`;
